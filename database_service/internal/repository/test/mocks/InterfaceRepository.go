// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	models "db_service/models"

	mock "github.com/stretchr/testify/mock"
)

// InterfaceRepository is an autogenerated mock type for the InterfaceRepository type
type InterfaceRepository struct {
	mock.Mock
}

type InterfaceRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *InterfaceRepository) EXPECT() *InterfaceRepository_Expecter {
	return &InterfaceRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: massa
func (_m *InterfaceRepository) Create(massa string) error {
	ret := _m.Called(massa)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(massa)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InterfaceRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type InterfaceRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - massa string
func (_e *InterfaceRepository_Expecter) Create(massa interface{}) *InterfaceRepository_Create_Call {
	return &InterfaceRepository_Create_Call{Call: _e.mock.On("Create", massa)}
}

func (_c *InterfaceRepository_Create_Call) Run(run func(massa string)) *InterfaceRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *InterfaceRepository_Create_Call) Return(_a0 error) *InterfaceRepository_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *InterfaceRepository_Create_Call) RunAndReturn(run func(string) error) *InterfaceRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: id
func (_m *InterfaceRepository) Delete(id int) (bool, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (bool, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) bool); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InterfaceRepository_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type InterfaceRepository_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - id int
func (_e *InterfaceRepository_Expecter) Delete(id interface{}) *InterfaceRepository_Delete_Call {
	return &InterfaceRepository_Delete_Call{Call: _e.mock.On("Delete", id)}
}

func (_c *InterfaceRepository_Delete_Call) Run(run func(id int)) *InterfaceRepository_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *InterfaceRepository_Delete_Call) Return(_a0 bool, _a1 error) *InterfaceRepository_Delete_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *InterfaceRepository_Delete_Call) RunAndReturn(run func(int) (bool, error)) *InterfaceRepository_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Done provides a mock function with given fields: id
func (_m *InterfaceRepository) Done(id int) (bool, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for Done")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (bool, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) bool); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InterfaceRepository_Done_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Done'
type InterfaceRepository_Done_Call struct {
	*mock.Call
}

// Done is a helper method to define mock.On call
//   - id int
func (_e *InterfaceRepository_Expecter) Done(id interface{}) *InterfaceRepository_Done_Call {
	return &InterfaceRepository_Done_Call{Call: _e.mock.On("Done", id)}
}

func (_c *InterfaceRepository_Done_Call) Run(run func(id int)) *InterfaceRepository_Done_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *InterfaceRepository_Done_Call) Return(_a0 bool, _a1 error) *InterfaceRepository_Done_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *InterfaceRepository_Done_Call) RunAndReturn(run func(int) (bool, error)) *InterfaceRepository_Done_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with no fields
func (_m *InterfaceRepository) List() ([]models.DatabaseModels, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []models.DatabaseModels
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]models.DatabaseModels, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []models.DatabaseModels); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.DatabaseModels)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InterfaceRepository_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type InterfaceRepository_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
func (_e *InterfaceRepository_Expecter) List() *InterfaceRepository_List_Call {
	return &InterfaceRepository_List_Call{Call: _e.mock.On("List")}
}

func (_c *InterfaceRepository_List_Call) Run(run func()) *InterfaceRepository_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *InterfaceRepository_List_Call) Return(_a0 []models.DatabaseModels, _a1 error) *InterfaceRepository_List_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *InterfaceRepository_List_Call) RunAndReturn(run func() ([]models.DatabaseModels, error)) *InterfaceRepository_List_Call {
	_c.Call.Return(run)
	return _c
}

// NewInterfaceRepository creates a new instance of InterfaceRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewInterfaceRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *InterfaceRepository {
	mock := &InterfaceRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
